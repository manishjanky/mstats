{"version":3,"sources":["App.tsx","serviceWorker.js","index.tsx"],"names":["App","state","dataSet","separator","mean","mode","median","variance","standardDeviation","analyse","Promise","resolve","reject","split","length","map","val","parseFloat","trim","calculateMean","then","setState","calculateVarianceAndSD","catch","error","calculateMedian","reduce","acc","cur","toFixed","calculateMode","sort","a","b","Math","pow","sqrt","className","onChange","event","target","value","rows","onClick","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+OAGqBA,G,iNACnBC,MAAQ,CACNC,QAAS,GACTC,UAAW,IACXC,KAAM,GACNC,KAAM,GACNC,OAAQ,GACRC,SAAU,GACVC,kBAAmB,I,EAuDrBC,QAAU,WA+BR,OA9Ba,IAAIC,SAAQ,SAACC,EAASC,GAEjC,IAAIV,EAAiB,EAAKD,MAAMC,QAAQW,MAAM,EAAKZ,MAAME,WAInDW,GAHNZ,EAAUA,EAAQa,KAAI,SAACC,GACrB,OAAOC,WAAWD,EAAIE,YAEDJ,OACvB,EAAKK,cAAcjB,EAASY,GAAQM,MAAK,SAAChB,GACxC,EAAKiB,SAAS,CAAEjB,KAAMA,IACtB,EAAKkB,uBAAuBpB,EAASY,EAAQV,GAAMgB,MAAK,SAACJ,GACvD,EAAKK,SAAS,CAAEd,SAAUS,EAAIT,SAAUC,kBAAmBQ,EAAIR,uBAC9De,OAAM,SAACC,GACR,EAAKH,SAAS,CAAEjB,KAAM,4BAEvBmB,OAAM,SAACC,GACR,EAAKH,SAAS,CAAEjB,KAAM,yBAGxB,EAAKqB,gBAAgBvB,EAASY,GAAQM,MAAK,SAACd,GAC1C,EAAKe,SAAS,CAAEf,OAAQA,OACvBiB,OAAM,SAACC,GACR,EAAKH,SAAS,CAAEjB,KAAM,6B,EAa5Be,cAAgB,SAACjB,EAAgBY,GAU/B,OATa,IAAIJ,SAAQ,SAACC,EAASC,GACjC,IAGED,GAFYT,EAAQwB,QAAO,SAACC,EAAUC,GAAe,OAAOD,EAAMC,IAAO,GACtDd,GACNe,QAAQ,IACrB,SACAjB,EAAO,Q,EAObkB,cAAgB,SAAC5B,EAAgBY,GAmB/B,OAlBa,IAAIJ,SAAQ,SAACC,EAASC,Q,EAsBrCa,gBAAkB,SAACvB,EAAgBY,GAejC,OAda,IAAIJ,SAAQ,SAACC,EAASC,GACjC,IAEE,GADAV,EAAUA,EAAQ6B,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KACjCnB,EAAS,IAAM,EACjBH,EAAQT,GAASY,EAAS,GAAK,SAI/BH,GAFaT,EAAQY,EAAS,GAChBZ,EAAQY,EAAS,EAAI,IACV,GAE3B,SACAF,EAAO,Q,EAObU,uBAAyB,SAACpB,EAAgBY,EAAgBV,GAaxD,OAZa,IAAIM,SAAQ,SAACC,EAASC,GACjC,IACE,IAAIL,EAAWL,EAAQwB,QAAO,SAACC,EAAKX,GAAN,OAAcW,EAAMO,KAAKC,IAAInB,EAAMZ,EAAM,KAAI,GAE3EO,EAAQ,CACNJ,UAFFA,GAAsBO,GAEDe,QAAQ,GAC3BrB,kBAAmB0B,KAAKE,KAAK7B,GAAUsB,QAAQ,KAEjD,SACAjB,EAAO,Q,wEAzJH,IAAD,OACP,OACE,kBAAC,WAAD,KACE,yBAAKyB,UAAU,+BACb,wBAAIA,UAAU,gBAAd,WAEF,yBAAKA,UAAU,YACb,yBAAKA,UAAU,cACb,0CACA,8BAAUC,SAAU,SAACC,GAAY,EAAKlB,SAAS,CAAEnB,QAASqC,EAAMC,OAAOC,SAAYJ,UAAU,eAAeK,KAAM,IAClH,8DAEF,yBAAKL,UAAU,cACb,4CACA,2BAAOI,MAAO,IAAKH,SAAU,SAACC,GAAY,EAAKlB,SAAS,CAAElB,UAAWoC,EAAMC,OAAOC,SAAYJ,UAAU,iBACxG,8DAEF,yBAAKA,UAAU,eACb,4BAAQM,QAASC,KAAKnC,QAAS4B,UAAU,mBAAzC,YAEF,yBAAKA,UAAU,OACb,yBAAKA,UAAU,cACb,uCACA,2BAAOI,MAAOG,KAAK3C,MAAMG,KAAMiC,UAAU,kBAE3C,yBAAKA,UAAU,cACb,uCACA,2BAAOI,MAAOG,KAAK3C,MAAMI,KAAMgC,UAAU,kBAG3C,yBAAKA,UAAU,cACb,yCACA,2BAAOI,MAAOG,KAAK3C,MAAMK,OAAQ+B,UAAU,mBAI/C,yBAAKA,UAAU,OACb,yBAAKA,UAAU,cACb,2CACA,2BAAOI,MAAOG,KAAK3C,MAAMM,SAAU8B,UAAU,kBAE/C,yBAAKA,UAAU,cACb,qDACA,2BAAOI,MAAOG,KAAK3C,MAAMO,kBAAmB6B,UAAU,yB,GAtDnCQ,IAAMC,YCSnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,MAAK,SAAAuC,GACjCA,EAAaC,iB","file":"static/js/main.7cb73e4a.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport './App.scss';\n\nexport default class App extends React.Component<any, any> {\n  state = {\n    dataSet: '',\n    separator: ',',\n    mean: '',\n    mode: '',\n    median: '',\n    variance: '',\n    standardDeviation: ''\n\n  }\n  render() {\n    return (\n      <Fragment>\n        <nav className=\"navbar navbar-light bg-info\">\n          <h3 className=\"navbar-brand\">mStats</h3>\n        </nav>\n        <div className=\"card p-2\">\n          <div className=\"form-group\">\n            <label>Dataset</label>\n            <textarea onChange={(event) => { this.setState({ dataSet: event.target.value }) }} className=\"form-control\" rows={4}></textarea>\n            <span>*Comma (,) separated values</span>\n          </div>\n          <div className=\"form-group\">\n            <label>Separator</label>\n            <input value={','} onChange={(event) => { this.setState({ separator: event.target.value }) }} className=\"form-control\" />\n            <span>*Separator if not comma (,)</span>\n          </div>\n          <div className=\"form-group \">\n            <button onClick={this.analyse} className=\"btn btn-primary\">Analyse</button>\n          </div>\n          <div className=\"row\">\n            <div className=\"col s12 m4\">\n              <label>Mean</label>\n              <input value={this.state.mean} className=\"form-control\" />\n            </div>\n            <div className=\"col s12 m4\">\n              <label>Mode</label>\n              <input value={this.state.mode} className=\"form-control\" />\n            </div>\n\n            <div className=\"col s12 m4\">\n              <label>Median</label>\n              <input value={this.state.median} className=\"form-control\" />\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col s12 m6\">\n              <label>Variance</label>\n              <input value={this.state.variance} className=\"form-control\" />\n            </div>\n            <div className=\"col s12 m6\">\n              <label>Standard Deviation</label>\n              <input value={this.state.standardDeviation} className=\"form-control\" />\n            </div>\n          </div>\n        </div>\n      </Fragment>\n\n    );\n  }\n\n  analyse = () => {\n    const prom = new Promise((resolve, reject) => {\n      debugger\n      let dataSet: any[] = this.state.dataSet.split(this.state.separator);\n      dataSet = dataSet.map((val) => {\n        return parseFloat(val.trim());\n      });\n      const length = dataSet.length;\n      this.calculateMean(dataSet, length).then((mean: any) => {\n        this.setState({ mean: mean });\n        this.calculateVarianceAndSD(dataSet, length, mean).then((val: any) => {\n          this.setState({ variance: val.variance, standardDeviation: val.standardDeviation });\n        }).catch((error) => {\n          this.setState({ mean: 'Calculation Error' });\n        });\n      }).catch((error) => {\n        this.setState({ mean: 'Calculation Error' });\n      });\n\n      this.calculateMedian(dataSet, length).then((median) => {\n        this.setState({ median: median });\n      }).catch((error) => {\n        this.setState({ mean: 'Calculation Error' });\n      });\n\n      // this.calculateMode(dataSet, length).then((mode) => {\n      //   this.setState({ mode: mode });\n      // }).catch((error) => {\n      //   this.setState({ mean: 'Calculation Error' });\n      // });\n    });\n    return prom;\n  }\n\n  /** Calculate Mean */\n  calculateMean = (dataSet: any[], length: number) => {\n    const prom = new Promise((resolve, reject) => {\n      try {\n        const sum = dataSet.reduce((acc: any, cur: any) => { return acc + cur }, 0);\n        const mean = sum / length;\n        resolve(mean.toFixed(5));\n      } catch{\n        reject(0);\n      }\n    });\n    return prom;\n  }\n\n  /** Calculate Mode */\n  calculateMode = (dataSet: any[], length: number) => {\n    const prom = new Promise((resolve, reject) => {\n      try {\n        // let max = 0;\n        // let mode: any = [];\n        // dataSet = dataSet.sort((a, b) => parseFloat(a) - parseFloat(b));\n        // let joinArr = \"~\" + dataSet.join('~~') + \"~\";\n        // joinArr.replace(/(~-*\\d+~)\\1*/g, (a, b) => {\n        //   let m = a.length / b.length;\n        //   if (max <= m) {\n        //     if (max < m) { mode = []; max = m; }\n        //     mode.push(b.replace(/~/g, \"\"));\n        //   }\n        // });\n        // resolve(mode);\n      } catch{\n        reject(0);\n      }\n    });\n    return prom;\n  }\n\n  /** Calculate Median */\n  calculateMedian = (dataSet: any[], length: number) => {\n    const prom = new Promise((resolve, reject) => {\n      try {\n        dataSet = dataSet.sort((a, b) => a - b);\n        if (length % 2 !== 0) {\n          resolve(dataSet[(length + 1) / 2]);\n        } else {\n          const n2th = dataSet[length / 2];\n          const n12th = dataSet[length / 2 + 1];\n          resolve((n2th + n12th) / 2);\n        }\n      } catch{\n        reject(0);\n      }\n    });\n    return prom;\n  }\n\n  /** Calculate Variance and Standard deviation */\n  calculateVarianceAndSD = (dataSet: any[], length: number, mean: number) => {\n    const prom = new Promise((resolve, reject) => {\n      try {\n        let variance = dataSet.reduce((acc, val) => acc + Math.pow(val - mean, 2), 0);\n        variance = variance / length;\n        resolve({\n          variance: variance.toFixed(5),\n          standardDeviation: Math.sqrt(variance).toFixed(5)\n        });\n      } catch{\n        reject(0);\n      }\n    });\n    return prom;\n  }\n\n\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}